{
  "version": 3,
  "file": "ngx-select-ex.umd.min.js",
  "sources": [
    "ng://ngx-select-ex/out/ngx-select/ngx-select.classes.ts",
    "ng://ngx-select-ex/out/ngx-select/ngx-templates.directive.ts",
    "ng://ngx-select-ex/out/ngx-select/ngx-select.component.ts",
    "ng://ngx-select-ex/out/ngx-select/ngx-select.module.ts"
  ],
  "sourcesContent": [
    "import {DomSanitizer, SafeHtml} from '@angular/platform-browser';\r\nimport * as escapeStringNs from 'escape-string-regexp';\r\nimport {INgxSelectOptGroup, INgxSelectOption, INgxSelectOptionBase, TNgxSelectOptionType} from './ngx-select.interfaces';\r\n\r\nconst escapeString = escapeStringNs;\r\n\r\nexport class NgxSelectOption implements INgxSelectOption, INgxSelectOptionBase {\r\n    readonly type: TNgxSelectOptionType = 'option';\r\n\r\n    constructor(public value: number | string,\r\n                public text: string,\r\n                public disabled: boolean,\r\n                public data: any,\r\n                private _parent: NgxSelectOptGroup = null) {\r\n    }\r\n\r\n    public get parent(): NgxSelectOptGroup {\r\n        return this._parent;\r\n    }\r\n\r\n    private cacheHighlightText: string;\r\n    private cacheRenderedText: SafeHtml = null;\r\n\r\n    public renderText(sanitizer: DomSanitizer, highlightText: string): SafeHtml {\r\n        if (this.cacheHighlightText !== highlightText || this.cacheRenderedText === null) {\r\n            this.cacheHighlightText = highlightText;\r\n            if (this.cacheHighlightText) {\r\n                this.cacheRenderedText = sanitizer.bypassSecurityTrustHtml((this.text + '').replace(\r\n                    new RegExp(escapeString(this.cacheHighlightText), 'gi'), '<strong>$&</strong>'\r\n                ));\r\n            } else {\r\n                this.cacheRenderedText = sanitizer.bypassSecurityTrustHtml(this.text);\r\n            }\r\n        }\r\n        return this.cacheRenderedText;\r\n    }\r\n}\r\n\r\nexport class NgxSelectOptGroup implements INgxSelectOptGroup, INgxSelectOptionBase {\r\n    readonly type: TNgxSelectOptionType = 'optgroup';\r\n\r\n    public optionsFiltered: NgxSelectOption[];\r\n\r\n    constructor(public label: string,\r\n                public options: NgxSelectOption[] = []) {\r\n        this.filter(() => true);\r\n    }\r\n\r\n    public filter(callbackFn: (value: NgxSelectOption) => any): void {\r\n        this.optionsFiltered = this.options.filter((option: NgxSelectOption) => callbackFn(option));\r\n    }\r\n}\r\n\r\nexport type TSelectOption = NgxSelectOptGroup | NgxSelectOption;\r\n",
    "import {Directive, TemplateRef} from '@angular/core';\r\n\r\n@Directive({selector: '[ngx-select-option]'})\r\nexport class NgxSelectOptionDirective {\r\n    constructor(public template: TemplateRef<any>) {\r\n    }\r\n}\r\n\r\n@Directive({selector: '[ngx-select-option-selected]'})\r\nexport class NgxSelectOptionSelectedDirective {\r\n    constructor(public template: TemplateRef<any>) {\r\n    }\r\n}\r\n\r\n@Directive({selector: '[ngx-select-option-not-found]'})\r\nexport class NgxSelectOptionNotFoundDirective {\r\n    constructor(public template: TemplateRef<any>) {\r\n    }\r\n}\r\n",
    "import {\r\n    AfterContentChecked, DoCheck, Input, Output, ViewChild,\r\n    Component, ElementRef, EventEmitter, forwardRef, HostListener, IterableDiffer, IterableDiffers, ChangeDetectorRef, ContentChild,\r\n    TemplateRef, Optional, Inject, InjectionToken\r\n} from '@angular/core';\r\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\r\nimport {DomSanitizer, SafeHtml} from '@angular/platform-browser';\r\nimport {Subject} from 'rxjs/Subject';\r\nimport {Observable} from 'rxjs/Observable';\r\nimport {BehaviorSubject} from 'rxjs/BehaviorSubject';\r\nimport 'rxjs/add/observable/empty';\r\nimport 'rxjs/add/observable/from';\r\nimport 'rxjs/add/observable/of';\r\nimport 'rxjs/add/operator/distinctUntilChanged';\r\nimport 'rxjs/add/operator/combineLatest';\r\nimport 'rxjs/add/operator/mergeMap';\r\nimport 'rxjs/add/operator/toArray';\r\nimport 'rxjs/add/operator/filter';\r\nimport 'rxjs/add/operator/share';\r\nimport 'rxjs/add/operator/merge';\r\nimport 'rxjs/add/operator/map';\r\nimport 'rxjs/add/operator/do';\r\nimport * as lodashNs from 'lodash';\r\nimport * as escapeStringNs from 'escape-string-regexp';\r\nimport {NgxSelectOptGroup, NgxSelectOption, TSelectOption} from './ngx-select.classes';\r\nimport {NgxSelectOptionDirective, NgxSelectOptionNotFoundDirective, NgxSelectOptionSelectedDirective} from './ngx-templates.directive';\r\nimport {INgxOptionNavigated, INgxSelectOption, INgxSelectOptions} from './ngx-select.interfaces';\r\n\r\nconst _ = lodashNs;\r\nconst escapeString = escapeStringNs;\r\n\r\nexport const NGX_SELECT_OPTIONS = new InjectionToken<any>('NGX_SELECT_OPTIONS');\r\n\r\nexport interface INgxSelectComponentMouseEvent extends MouseEvent {\r\n    clickedSelectComponent?: NgxSelectComponent;\r\n}\r\n\r\nenum ENavigation {\r\n    first, previous, next, last,\r\n    firstSelected, firstIfOptionActiveInvisible\r\n}\r\n\r\nfunction propertyExists(obj: Object, propertyName: string) {\r\n    return propertyName in obj;\r\n}\r\n\r\n@Component({\r\n    selector: 'ngx-select',\r\n    template: `<div #main [tabindex]=\"disabled? -1: 0\" class=\"ngx-select dropdown\"\r\n     [ngClass]=\"setFormControlSize({\r\n        'ngx-select_multiple form-control': multiple === true,\r\n        'open show': optionsOpened && optionsFiltered.length\r\n     }, multiple === true)\"\r\n     (click)=\"mainClicked($event)\" (focusin)=\"mainClicked($event)\"\r\n     (focus)=\"focusToInput()\" (keydown)=\"inputKeyDown($event)\"\r\n     (keyup)=\"mainKeyUp($event)\">\r\n    <div [ngClass]=\"{ 'ngx-select__disabled': disabled}\"></div>\r\n\r\n    <!-- single selected item -->\r\n    <div class=\"ngx-select__selected\"\r\n         *ngIf=\"(multiple === false) && (!optionsOpened || noAutoComplete)\">\r\n        <div class=\"ngx-select__toggle btn form-control\" [ngClass]=\"setFormControlSize(setBtnSize())\"\r\n             (click)=\"optionsOpen()\">\r\n\r\n            <span *ngIf=\"!optionsSelected.length\" class=\"ngx-select__placeholder text-muted\">\r\n                <span [innerHtml]=\"placeholder\"></span>\r\n            </span>\r\n            <span *ngIf=\"optionsSelected.length\"\r\n                  class=\"ngx-select__selected-single pull-left float-left\"\r\n                  [ngClass]=\"{'ngx-select__allow-clear': allowClear}\">\r\n                <ng-container [ngTemplateOutlet]=\"templateSelectedOption || defaultTemplateOption\"\r\n                              [ngTemplateOutletContext]=\"{$implicit: optionsSelected[0], index: 0,\r\n                                                          text: sanitize(optionsSelected[0].text)}\">\r\n                </ng-container>\r\n            </span>\r\n            <span class=\"ngx-select__toggle-buttons\">\r\n                <a class=\"ngx-select__clear btn btn-sm btn-link\" *ngIf=\"canClearNotMultiple()\"\r\n                   [ngClass]=\"setBtnSize()\"\r\n                   (click)=\"optionRemove(optionsSelected[0], $event)\">\r\n                    <i class=\"ngx-select__clear-icon\"></i>\r\n                </a>\r\n                <i class=\"dropdown-toggle\"></i>\r\n                <i class=\"ngx-select__toggle-caret caret\"></i>\r\n            </span>\r\n        </div>\r\n    </div>\r\n\r\n    <!-- multiple selected items -->\r\n    <div class=\"ngx-select__selected\" *ngIf=\"multiple === true\">\r\n        <span *ngFor=\"let option of optionsSelected; trackBy: trackByOption; let idx = index\">\r\n            <span tabindex=\"-1\" [ngClass]=\"setBtnSize()\"\r\n                  class=\"ngx-select__selected-plural btn btn-default btn-secondary btn-xs\">\r\n\r\n                <ng-container [ngTemplateOutlet]=\"templateSelectedOption || defaultTemplateOption\"\r\n                              [ngTemplateOutletContext]=\"{$implicit: option, index: idx, text: sanitize(option.text)}\">\r\n                </ng-container>\r\n\r\n                <a class=\"ngx-select__clear btn btn-sm btn-link pull-right float-right\" [ngClass]=\"setBtnSize()\"\r\n                   (click)=\"optionRemove(option, $event)\">\r\n                    <i class=\"ngx-select__clear-icon\"></i>\r\n                </a>\r\n            </span>\r\n        </span>\r\n    </div>\r\n\r\n    <!-- live search an item from the list -->\r\n    <input #input type=\"text\" class=\"ngx-select__search form-control\" [ngClass]=\"setFormControlSize()\"\r\n           *ngIf=\"checkInputVisibility()\"\r\n           [tabindex]=\"multiple === false? -1: 0\"\r\n           (keydown)=\"inputKeyDown($event)\"\r\n           (keyup)=\"inputKeyUp(input.value)\"\r\n           (input)=\"doInputText(input.value)\"\r\n           [disabled]=\"disabled\"\r\n           [placeholder]=\"optionsSelected.length? '': placeholder\"\r\n           (click)=\"inputClick(input.value)\"\r\n           autocomplete=\"off\"\r\n           autocorrect=\"off\"\r\n           autocapitalize=\"off\"\r\n           spellcheck=\"false\"\r\n           role=\"combobox\">\r\n\r\n    <!-- options template -->\r\n    <ul #choiceMenu role=\"menu\" *ngIf=\"isFocused\" class=\"ngx-select__choices dropdown-menu\"\r\n        [class.show]=\"optionsOpened\">\r\n        <li class=\"ngx-select__item-group\" role=\"menuitem\"\r\n            *ngFor=\"let opt of optionsFiltered; trackBy: trackByOption; let idxGroup=index\">\r\n            <div class=\"divider dropdown-divider\" *ngIf=\"opt.type === 'optgroup' && (idxGroup > 0)\"></div>\r\n            <div class=\"dropdown-header\" *ngIf=\"opt.type === 'optgroup'\">{{opt.label}}</div>\r\n\r\n            <a href=\"#\" #choiceItem class=\"ngx-select__item dropdown-item\"\r\n               *ngFor=\"let option of (opt.optionsFiltered || [opt]); trackBy: trackByOption; let idxOption = index\"\r\n               [ngClass]=\"{\r\n                    'ngx-select__item_active active': isOptionActive(option, choiceItem),\r\n                    'ngx-select__item_disabled disabled': option.disabled\r\n               }\"\r\n               (mouseenter)=\"optionActivate({\r\n                    activeOption: option,\r\n                    filteredOptionList: optionsFiltered,\r\n                    index: optionsFiltered.indexOf(option)\r\n               })\"\r\n               (click)=\"optionSelect(option, $event)\">\r\n                <ng-container [ngTemplateOutlet]=\"templateOption || defaultTemplateOption\"\r\n                              [ngTemplateOutletContext]=\"{$implicit: option, text: highlightOption(option),\r\n                              index: idxGroup, subIndex: idxOption}\"></ng-container>\r\n            </a>\r\n        </li>\r\n        <li class=\"ngx-select__item ngx-select__item_no-found dropdown-header\" *ngIf=\"!optionsFiltered.length\">\r\n            <ng-container [ngTemplateOutlet]=\"templateOptionNotFound || defaultTemplateOptionNotFound\"\r\n                          [ngTemplateOutletContext]=\"{$implicit: inputText}\"></ng-container>\r\n        </li>\r\n    </ul>\r\n\r\n    <!--Default templates-->\r\n    <ng-template #defaultTemplateOption let-text=\"text\">\r\n        <span [innerHtml]=\"text\"></span>\r\n    </ng-template>\r\n\r\n    <ng-template #defaultTemplateOptionNotFound>\r\n        {{noResultsFound}}\r\n    </ng-template>\r\n\r\n</div>\r\n`,\r\n    styles: [`.ngx-select_multiple{height:auto;padding:3px 3px 0}.ngx-select_multiple .ngx-select__search{background-color:transparent!important;border:none;outline:0;-webkit-box-shadow:none;box-shadow:none;height:1.6666em;padding:0;margin-bottom:3px}.ngx-select__disabled{background-color:#eceeef;border-radius:4px;position:absolute;width:100%;height:100%;z-index:5;opacity:.6;top:0;left:0;cursor:not-allowed}.ngx-select__toggle{outline:0;position:relative;text-align:left!important;color:#333;background-color:#fff;border-color:#ccc;display:-webkit-inline-box;display:-ms-inline-flexbox;display:inline-flex;-webkit-box-align:stretch;-ms-flex-align:stretch;align-items:stretch;-webkit-box-pack:justify;-ms-flex-pack:justify;justify-content:space-between}.ngx-select__toggle:hover{color:#333;background-color:#e6e6e6;border-color:#adadad}.ngx-select__toggle-buttons{-ms-flex-negative:0;flex-shrink:0;display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-align:center;-ms-flex-align:center;align-items:center}.ngx-select__toggle-caret{position:absolute;height:10px;top:50%;right:10px;margin-top:-2px}.ngx-select__placeholder{float:left}.ngx-select__clear{margin-right:10px;padding:0;border:none}.ngx-select_multiple .ngx-select__clear{line-height:initial;margin-left:5px;margin-right:0;color:#000;opacity:.5}.ngx-select__clear-icon{display:inline-block;font-size:inherit;cursor:pointer;position:relative;width:1em;height:.75em;padding:0}.ngx-select__clear-icon:after,.ngx-select__clear-icon:before{content:'';position:absolute;border-top:3px solid;width:100%;top:50%;left:0;margin-top:-1px}.ngx-select__clear-icon:before{-webkit-transform:rotate(45deg);transform:rotate(45deg)}.ngx-select__clear-icon:after{-webkit-transform:rotate(-45deg);transform:rotate(-45deg)}.ngx-select__choices{width:100%;height:auto;max-height:200px;overflow-x:hidden;margin-top:0;position:absolute}.ngx-select_multiple .ngx-select__choices{margin-top:1px}.ngx-select__item{display:block;padding:3px 20px;clear:both;font-weight:400;line-height:1.42857143;white-space:nowrap;cursor:pointer;text-decoration:none}.ngx-select__item_disabled,.ngx-select__item_no-found{cursor:default}.ngx-select__item_active{color:#fff;outline:0;background-color:#428bca}.ngx-select__selected-plural,.ngx-select__selected-single{display:-webkit-inline-box;display:-ms-inline-flexbox;display:inline-flex;-webkit-box-align:center;-ms-flex-align:center;align-items:center;overflow:hidden}.ngx-select__selected-plural span,.ngx-select__selected-single span{overflow:hidden;text-overflow:ellipsis}.ngx-select__selected-plural{outline:0;margin:0 3px 3px 0}.input-group>.dropdown{position:static}`],\r\n    providers: [\r\n        {\r\n            provide: NG_VALUE_ACCESSOR,\r\n            useExisting: forwardRef(() => NgxSelectComponent),\r\n            multi: true\r\n        }\r\n    ]\r\n})\r\nexport class NgxSelectComponent implements INgxSelectOptions, ControlValueAccessor, DoCheck, AfterContentChecked {\r\n    @Input() public items: any[];\r\n    @Input() public optionValueField = 'id';\r\n    @Input() public optionTextField = 'text';\r\n    @Input() public optGroupLabelField = 'label';\r\n    @Input() public optGroupOptionsField = 'options';\r\n    @Input() public multiple = false;\r\n    @Input() public allowClear = false;\r\n    @Input() public placeholder = '';\r\n    @Input() public noAutoComplete = false;\r\n    @Input() public disabled = false;\r\n    @Input() public defaultValue: any[] = [];\r\n    @Input() public autoSelectSingleOption = false;\r\n    @Input() public autoClearSearch = false;\r\n    @Input() public noResultsFound = 'No results found';\r\n    @Input() public size: 'small' | 'default' | 'large' = 'default';\r\n    @Input() public searchCallback: (search: string, item: INgxSelectOption) => boolean;\r\n    public keyCodeToRemoveSelected = 'Delete';\r\n    public keyCodeToOptionsOpen = 'Enter';\r\n    public keyCodeToOptionsClose = 'Escape';\r\n    public keyCodeToOptionsSelect = 'Enter';\r\n    public keyCodeToNavigateFirst = 'ArrowLeft';\r\n    public keyCodeToNavigatePrevious = 'ArrowUp';\r\n    public keyCodeToNavigateNext = 'ArrowDown';\r\n    public keyCodeToNavigateLast = 'ArrowRight';\r\n\r\n    @Output() public typed = new EventEmitter<string>();\r\n    @Output() public focus = new EventEmitter<void>();\r\n    @Output() public blur = new EventEmitter<void>();\r\n    @Output() public open = new EventEmitter<void>();\r\n    @Output() public close = new EventEmitter<void>();\r\n    @Output() public select = new EventEmitter<any>();\r\n    @Output() public remove = new EventEmitter<any>();\r\n    @Output() public navigated = new EventEmitter<INgxOptionNavigated>();\r\n    @Output() public selectionChanges = new EventEmitter<INgxSelectOption[]>();\r\n\r\n    @ViewChild('main') protected mainElRef: ElementRef;\r\n    @ViewChild('input') protected inputElRef: ElementRef;\r\n    @ViewChild('choiceMenu') protected choiceMenuElRef: ElementRef;\r\n\r\n    @ContentChild(NgxSelectOptionDirective, {read: TemplateRef}) templateOption: NgxSelectOptionDirective;\r\n    @ContentChild(NgxSelectOptionSelectedDirective, {read: TemplateRef}) templateSelectedOption: NgxSelectOptionSelectedDirective;\r\n    @ContentChild(NgxSelectOptionNotFoundDirective, {read: TemplateRef}) templateOptionNotFound: NgxSelectOptionNotFoundDirective;\r\n\r\n    public optionsOpened = false;\r\n    public optionsFiltered: TSelectOption[];\r\n\r\n    private optionActive: NgxSelectOption;\r\n    private itemsDiffer: IterableDiffer<any>;\r\n    private defaultValueDiffer: IterableDiffer<any[]>;\r\n    private actualValue: any[] = [];\r\n\r\n    public subjOptions = new BehaviorSubject<TSelectOption[]>([]);\r\n    private subjSearchText = new BehaviorSubject<string>('');\r\n\r\n    private subjOptionsSelected = new BehaviorSubject<NgxSelectOption[]>([]);\r\n    private subjExternalValue = new BehaviorSubject<any[]>([]);\r\n    private subjDefaultValue = new BehaviorSubject<any[]>([]);\r\n    private subjRegisterOnChange = new Subject();\r\n\r\n    private cacheOptionsFilteredFlat: NgxSelectOption[];\r\n    private cacheElementOffsetTop: number;\r\n\r\n    private _focusToInput = false;\r\n    public isFocused = false;\r\n\r\n    /** @internal */\r\n    public get inputText() {\r\n      if (this.inputElRef && this.inputElRef.nativeElement) {\r\n        return this.inputElRef.nativeElement.value;\r\n      }\r\n      return '';\r\n    }\r\n\r\n    constructor(iterableDiffers: IterableDiffers, private sanitizer: DomSanitizer, private cd: ChangeDetectorRef,\r\n                @Inject(NGX_SELECT_OPTIONS) @Optional() defaultOptions: INgxSelectOptions) {\r\n        Object.assign(this, defaultOptions);\r\n\r\n        // differs\r\n        this.itemsDiffer = iterableDiffers.find([]).create<any>(null);\r\n        this.defaultValueDiffer = iterableDiffers.find([]).create<any>(null);\r\n\r\n        // observers\r\n        this.typed.subscribe((text: string) => this.subjSearchText.next(text));\r\n        this.subjOptionsSelected.subscribe((options: NgxSelectOption[]) => this.selectionChanges.emit(options));\r\n        let cacheExternalValue: any[];\r\n        const subjActualValue = this.subjExternalValue\r\n            .map((v: any[]) => cacheExternalValue = v === null ? [] : [].concat(v))\r\n            .merge(this.subjOptionsSelected.map((options: NgxSelectOption[]) =>\r\n                options.map((o: NgxSelectOption) => o.value)\r\n            ))\r\n            .combineLatest(this.subjDefaultValue, (eVal: any[], dVal: any[]) => {\r\n                const newVal = _.isEqual(eVal, dVal) ? [] : eVal;\r\n                return newVal.length ? newVal : dVal;\r\n            })\r\n            .distinctUntilChanged((x, y) => _.isEqual(x, y))\r\n            .share();\r\n\r\n        subjActualValue\r\n            .combineLatest(this.subjRegisterOnChange, (actualValue: any[]) => actualValue)\r\n            .subscribe((actualValue: any[]) => {\r\n                this.actualValue = actualValue;\r\n                if (!_.isEqual(actualValue, cacheExternalValue)) {\r\n                    cacheExternalValue = actualValue;\r\n                    if (this.multiple) {\r\n                        this.onChange(actualValue);\r\n                    } else {\r\n                        this.onChange(actualValue.length ? actualValue[0] : null);\r\n                    }\r\n                }\r\n            });\r\n\r\n        this.subjOptions\r\n            .flatMap((options: TSelectOption[]) => Observable\r\n                .from(options)\r\n                .flatMap((option: TSelectOption) => option instanceof NgxSelectOption\r\n                    ? Observable.of(option)\r\n                    : (option instanceof NgxSelectOptGroup ? Observable.from(option.options) : Observable.empty())\r\n                )\r\n                .toArray()\r\n            )\r\n            .combineLatest(subjActualValue, (optionsFlat: NgxSelectOption[], actualValue: any[]) => {\r\n                Observable.from(optionsFlat)\r\n                    .filter((option: NgxSelectOption) => actualValue.indexOf(option.value) !== -1)\r\n                    .toArray()\r\n                    .filter((options: NgxSelectOption[]) => !_.isEqual(options, this.subjOptionsSelected.value))\r\n                    .subscribe((options: NgxSelectOption[]) => this.subjOptionsSelected.next(options));\r\n            })\r\n            .subscribe();\r\n\r\n        this.subjOptions\r\n            .combineLatest(this.subjOptionsSelected, this.subjSearchText,\r\n                (options: TSelectOption[], selectedOptions: NgxSelectOption[], search: string) => {\r\n                    this.optionsFiltered = this.filterOptions(search, options, selectedOptions);\r\n                    this.cacheOptionsFilteredFlat = null;\r\n                    this.navigateOption(ENavigation.firstIfOptionActiveInvisible);\r\n                    return selectedOptions;\r\n                }\r\n            )\r\n            .flatMap((selectedOptions: NgxSelectOption[]) => {\r\n                return this.optionsFilteredFlat().filter((flatOptions: NgxSelectOption[]) =>\r\n                    this.autoSelectSingleOption && flatOptions.length === 1 && !selectedOptions.length\r\n                );\r\n            })\r\n            .subscribe((flatOptions: NgxSelectOption[]) => this.subjOptionsSelected.next(flatOptions));\r\n    }\r\n\r\n    public setFormControlSize(otherClassNames: Object = {}, useFormControl: boolean = true) {\r\n        const formControlExtraClasses = useFormControl ? {\r\n            'form-control-sm input-sm': this.size === 'small',\r\n            'form-control-lg input-lg': this.size === 'large'\r\n        } : {};\r\n        return Object.assign(formControlExtraClasses, otherClassNames);\r\n    }\r\n\r\n    public setBtnSize() {\r\n        return {'btn-sm': this.size === 'small', 'btn-lg': this.size === 'large'};\r\n    }\r\n\r\n    public get optionsSelected(): NgxSelectOption[] {\r\n        return this.subjOptionsSelected.value;\r\n    }\r\n\r\n    public mainClicked(event: INgxSelectComponentMouseEvent) {\r\n        event.clickedSelectComponent = this;\r\n        if (!this.isFocused) {\r\n            this.isFocused = true;\r\n            this.focus.emit();\r\n        }\r\n    }\r\n\r\n    @HostListener('document:focusin', ['$event'])\r\n    @HostListener('document:click', ['$event'])\r\n    public documentClick(event: INgxSelectComponentMouseEvent) {\r\n        if (event.clickedSelectComponent !== this) {\r\n            if (this.optionsOpened) {\r\n                this.optionsClose();\r\n                this.cd.detectChanges(); // fix error because of delay between different events\r\n            }\r\n            if (this.isFocused) {\r\n                this.isFocused = false;\r\n                this.blur.emit();\r\n            }\r\n        }\r\n    }\r\n\r\n    private optionsFilteredFlat(): Observable<NgxSelectOption[]> {\r\n        if (this.cacheOptionsFilteredFlat) {\r\n            return Observable.of(this.cacheOptionsFilteredFlat);\r\n        }\r\n\r\n        return Observable.from(this.optionsFiltered)\r\n            .flatMap<TSelectOption, NgxSelectOption>((option: TSelectOption) =>\r\n                option instanceof NgxSelectOption ? Observable.of(option) :\r\n                    (option instanceof NgxSelectOptGroup ? Observable.from(option.optionsFiltered) : Observable.empty())\r\n            )\r\n            .filter((optionsFilteredFlat: NgxSelectOption) => !optionsFilteredFlat.disabled)\r\n            .toArray()\r\n            .do((optionsFilteredFlat: NgxSelectOption[]) => this.cacheOptionsFilteredFlat = optionsFilteredFlat);\r\n    }\r\n\r\n    private navigateOption(navigation: ENavigation) {\r\n        this.optionsFilteredFlat()\r\n            .map<NgxSelectOption[], INgxOptionNavigated>((options: NgxSelectOption[]) => {\r\n                const navigated: INgxOptionNavigated = {index: -1, activeOption: null, filteredOptionList: options};\r\n                let newActiveIdx;\r\n                switch (navigation) {\r\n                    case ENavigation.first:\r\n                        navigated.index = 0;\r\n                        break;\r\n                    case ENavigation.previous:\r\n                        newActiveIdx = options.indexOf(this.optionActive) - 1;\r\n                        navigated.index = newActiveIdx >= 0 ? newActiveIdx : options.length - 1;\r\n                        break;\r\n                    case ENavigation.next:\r\n                        newActiveIdx = options.indexOf(this.optionActive) + 1;\r\n                        navigated.index = newActiveIdx < options.length ? newActiveIdx : 0;\r\n                        break;\r\n                    case ENavigation.last:\r\n                        navigated.index = options.length - 1;\r\n                        break;\r\n                    case ENavigation.firstSelected:\r\n                        if (this.subjOptionsSelected.value.length) {\r\n                            navigated.index = options.indexOf(this.subjOptionsSelected.value[0]);\r\n                        }\r\n                        break;\r\n                    case ENavigation.firstIfOptionActiveInvisible:\r\n                        const idxOfOptionActive = options.indexOf(this.optionActive);\r\n                        navigated.index = idxOfOptionActive > 0 ? idxOfOptionActive : 0;\r\n                        break;\r\n                }\r\n                navigated.activeOption = options[navigated.index];\r\n                return navigated;\r\n            })\r\n            .subscribe((newNavigated: INgxOptionNavigated) => this.optionActivate(newNavigated));\r\n    }\r\n\r\n    public ngDoCheck(): void {\r\n        if (this.itemsDiffer.diff(this.items)) {\r\n            this.subjOptions.next(this.buildOptions(this.items));\r\n        }\r\n\r\n        const defVal = this.defaultValue ? [].concat(this.defaultValue) : [];\r\n        if (this.defaultValueDiffer.diff(defVal)) {\r\n            this.subjDefaultValue.next(defVal);\r\n        }\r\n    }\r\n\r\n    public ngAfterContentChecked(): void {\r\n        if (this._focusToInput && this.checkInputVisibility() && this.inputElRef &&\r\n            this.inputElRef.nativeElement !== document.activeElement) {\r\n            this._focusToInput = false;\r\n            this.inputElRef.nativeElement.focus();\r\n        }\r\n    }\r\n\r\n    public canClearNotMultiple(): boolean {\r\n        return this.allowClear && !!this.subjOptionsSelected.value.length &&\r\n            (!this.subjDefaultValue.value.length || this.subjDefaultValue.value[0] !== this.actualValue[0]);\r\n    }\r\n\r\n    public focusToInput(): void {\r\n        this._focusToInput = true;\r\n    }\r\n\r\n    public inputKeyDown(event: KeyboardEvent) {\r\n        const keysForOpenedState = [\r\n            this.keyCodeToOptionsSelect,\r\n            this.keyCodeToNavigateFirst,\r\n            this.keyCodeToNavigatePrevious,\r\n            this.keyCodeToNavigateNext,\r\n            this.keyCodeToNavigateLast,\r\n        ];\r\n        const keysForClosedState = [this.keyCodeToOptionsOpen, this.keyCodeToRemoveSelected];\r\n\r\n        if (this.optionsOpened && keysForOpenedState.indexOf(event.code) !== -1) {\r\n            event.preventDefault();\r\n            event.stopPropagation();\r\n            switch (event.code) {\r\n                case this.keyCodeToOptionsSelect:\r\n                    this.optionSelect(this.optionActive);\r\n                    this.navigateOption(ENavigation.next);\r\n                    break;\r\n                case this.keyCodeToNavigateFirst:\r\n                    this.navigateOption(ENavigation.first);\r\n                    break;\r\n                case this.keyCodeToNavigatePrevious:\r\n                    this.navigateOption(ENavigation.previous);\r\n                    break;\r\n                case this.keyCodeToNavigateLast:\r\n                    this.navigateOption(ENavigation.last);\r\n                    break;\r\n                case this.keyCodeToNavigateNext:\r\n                    this.navigateOption(ENavigation.next);\r\n                    break;\r\n            }\r\n        } else if (!this.optionsOpened && keysForClosedState.indexOf(event.code) !== -1) {\r\n            event.preventDefault();\r\n            event.stopPropagation();\r\n            switch (event.code) {\r\n                case this.keyCodeToOptionsOpen:\r\n                    this.optionsOpen();\r\n                    break;\r\n                case this.keyCodeToRemoveSelected:\r\n                    this.optionRemove(this.subjOptionsSelected.value[this.subjOptionsSelected.value.length - 1], event);\r\n                    break;\r\n            }\r\n        }\r\n    }\r\n\r\n    public mainKeyUp(event: KeyboardEvent): void {\r\n        if (event.code === this.keyCodeToOptionsClose) {\r\n            this.optionsClose(/*true*/);\r\n        }\r\n    }\r\n\r\n    public trackByOption(index: number, option: TSelectOption) {\r\n        return option instanceof NgxSelectOption ? option.value :\r\n            (option instanceof NgxSelectOptGroup ? option.label : option);\r\n    }\r\n\r\n    public checkInputVisibility(): boolean {\r\n        return (this.multiple === true) || (this.optionsOpened && !this.noAutoComplete);\r\n    }\r\n\r\n    /** @internal */\r\n    public inputKeyUp(value: string = '') {\r\n        if (!this.optionsOpened && value) {\r\n            this.optionsOpen(value);\r\n        }\r\n    }\r\n\r\n    /** @internal */\r\n    public doInputText(value: string) {\r\n        if (this.optionsOpened) {\r\n            this.typed.emit(value);\r\n        }\r\n    }\r\n\r\n    /** @internal */\r\n    public inputClick(value: string = '') {\r\n        if (!this.optionsOpened) {\r\n            this.optionsOpen(value);\r\n        }\r\n    }\r\n\r\n    /** @internal */\r\n    public sanitize(html: string): SafeHtml {\r\n        return html ? this.sanitizer.bypassSecurityTrustHtml(html) : null;\r\n    }\r\n\r\n    /** @internal */\r\n    public highlightOption(option: NgxSelectOption): SafeHtml {\r\n        if (this.inputElRef) {\r\n            return option.renderText(this.sanitizer, this.inputElRef.nativeElement.value);\r\n        }\r\n        return option.renderText(this.sanitizer, '');\r\n    }\r\n\r\n    /** @internal */\r\n    public optionSelect(option: NgxSelectOption, event: Event = null): void {\r\n        if (event) {\r\n            event.preventDefault();\r\n            event.stopPropagation();\r\n        }\r\n        if (option && !option.disabled) {\r\n            this.subjOptionsSelected.next((this.multiple ? this.subjOptionsSelected.value : []).concat([option]));\r\n            this.select.emit(option.value);\r\n            this.optionsClose(/*true*/);\r\n            this.onTouched();\r\n        }\r\n    }\r\n\r\n    /** @internal */\r\n    public optionRemove(option: NgxSelectOption, event: Event): void {\r\n        if (!this.disabled && option) {\r\n            event.stopPropagation();\r\n            this.subjOptionsSelected.next((this.multiple ? this.subjOptionsSelected.value : []).filter(o => o !== option));\r\n            this.remove.emit(option.value);\r\n        }\r\n    }\r\n\r\n    /** @internal */\r\n    public isOptionActive(option: NgxSelectOption, element: HTMLElement) {\r\n        if (this.optionActive === option) {\r\n            this.ensureVisibleElement(element);\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /** @internal */\r\n    public optionActivate(navigated: INgxOptionNavigated): void {\r\n        if ((this.optionActive !== navigated.activeOption) &&\r\n            (!navigated.activeOption || !navigated.activeOption.disabled)) {\r\n            this.optionActive = navigated.activeOption;\r\n            this.navigated.emit(navigated);\r\n        }\r\n    }\r\n\r\n    private filterOptions(search: string, options: TSelectOption[], selectedOptions: NgxSelectOption[]): TSelectOption[] {\r\n        const regExp = new RegExp(escapeString(search), 'i'),\r\n            filterOption = (option: NgxSelectOption) => {\r\n                if (this.searchCallback) {\r\n                    return this.searchCallback(search, option);\r\n                }\r\n                return (!search || regExp.test(option.text)) && (!this.multiple || selectedOptions.indexOf(option) === -1);\r\n            };\r\n\r\n        return options.filter((option: TSelectOption) => {\r\n            if (option instanceof NgxSelectOption) {\r\n                return filterOption(<NgxSelectOption>option);\r\n            } else if (option instanceof NgxSelectOptGroup) {\r\n                const subOp = <NgxSelectOptGroup>option;\r\n                subOp.filter((subOption: NgxSelectOption) => filterOption(subOption));\r\n                return subOp.optionsFiltered.length;\r\n            }\r\n        });\r\n    }\r\n\r\n    private ensureVisibleElement(element: HTMLElement) {\r\n        if (this.choiceMenuElRef && this.cacheElementOffsetTop !== element.offsetTop) {\r\n            this.cacheElementOffsetTop = element.offsetTop;\r\n            const container: HTMLElement = this.choiceMenuElRef.nativeElement;\r\n            if (this.cacheElementOffsetTop < container.scrollTop) {\r\n                container.scrollTop = this.cacheElementOffsetTop;\r\n            } else if (this.cacheElementOffsetTop + element.offsetHeight > container.scrollTop + container.clientHeight) {\r\n                container.scrollTop = this.cacheElementOffsetTop + element.offsetHeight - container.clientHeight;\r\n            }\r\n        }\r\n    }\r\n\r\n    public optionsOpen(search: string = '') {\r\n        if (!this.disabled) {\r\n            this.optionsOpened = true;\r\n            this.subjSearchText.next(search);\r\n            if (!this.multiple && this.subjOptionsSelected.value.length) {\r\n                this.navigateOption(ENavigation.firstSelected);\r\n            } else {\r\n                this.navigateOption(ENavigation.first);\r\n            }\r\n            this.focusToInput();\r\n            this.open.emit();\r\n        }\r\n    }\r\n\r\n    public optionsClose(/*focusToHost: boolean = false*/) {\r\n        this.optionsOpened = false;\r\n        // if (focusToHost) {\r\n        //     const x = window.scrollX, y = window.scrollY;\r\n        //     this.mainElRef.nativeElement.focus();\r\n        //     window.scrollTo(x, y);\r\n        // }\r\n        this.close.emit();\r\n\r\n        if (this.autoClearSearch && this.multiple && this.inputElRef) {\r\n            this.inputElRef.nativeElement.value = null;\r\n        }\r\n    }\r\n\r\n    private buildOptions(data: any[]): Array<NgxSelectOption | NgxSelectOptGroup> {\r\n        const result: Array<NgxSelectOption | NgxSelectOptGroup> = [];\r\n        if (Array.isArray(data)) {\r\n            let option: NgxSelectOption;\r\n            data.forEach((item: any) => {\r\n                const isOptGroup = typeof item === 'object' && item !== null &&\r\n                    propertyExists(item, this.optGroupLabelField) && propertyExists(item, this.optGroupOptionsField) &&\r\n                    Array.isArray(item[this.optGroupOptionsField]);\r\n                if (isOptGroup) {\r\n                    const optGroup = new NgxSelectOptGroup(item[this.optGroupLabelField]);\r\n                    item[this.optGroupOptionsField].forEach((subOption: NgxSelectOption) => {\r\n                        if (option = this.buildOption(subOption, optGroup)) {\r\n                            optGroup.options.push(option);\r\n                        }\r\n                    });\r\n                    result.push(optGroup);\r\n                } else if (option = this.buildOption(item, null)) {\r\n                    result.push(option);\r\n                }\r\n            });\r\n        }\r\n        return result;\r\n    }\r\n\r\n    private buildOption(data: any, parent: NgxSelectOptGroup): NgxSelectOption {\r\n        let value, text, disabled;\r\n        if (typeof data === 'string' || typeof data === 'number') {\r\n            value = text = data;\r\n            disabled = false;\r\n        } else if (typeof data === 'object' && data !== null &&\r\n            (propertyExists(data, this.optionValueField) || propertyExists(data, this.optionTextField))) {\r\n            value = propertyExists(data, this.optionValueField) ? data[this.optionValueField] : data[this.optionTextField];\r\n            text = propertyExists(data, this.optionTextField) ? data[this.optionTextField] : data[this.optionValueField];\r\n            disabled = propertyExists(data, 'disabled') ? data['disabled'] : false;\r\n        } else {\r\n            return null;\r\n        }\r\n        return new NgxSelectOption(value, text, disabled, data, parent);\r\n    }\r\n\r\n    //////////// interface ControlValueAccessor ////////////\r\n    public onChange = (v: any) => v;\r\n\r\n    public onTouched: () => void = () => null;\r\n\r\n    public writeValue(obj: any): void {\r\n        this.subjExternalValue.next(obj);\r\n    }\r\n\r\n    public registerOnChange(fn: (_: any) => {}): void {\r\n        this.onChange = fn;\r\n        this.subjRegisterOnChange.next();\r\n    }\r\n\r\n    public registerOnTouched(fn: () => {}): void {\r\n        this.onTouched = fn;\r\n    }\r\n\r\n    public setDisabledState(isDisabled: boolean): void {\r\n        this.disabled = isDisabled;\r\n    }\r\n}\r\n",
    "import {ModuleWithProviders, NgModule} from '@angular/core';\r\nimport {CommonModule} from '@angular/common';\r\nimport {NGX_SELECT_OPTIONS, NgxSelectComponent} from './ngx-select.component';\r\nimport {NgxSelectOptionDirective, NgxSelectOptionNotFoundDirective, NgxSelectOptionSelectedDirective} from './ngx-templates.directive';\r\nimport {INgxSelectOptions} from './ngx-select.interfaces';\r\n\r\n@NgModule({\r\n    imports: [\r\n        CommonModule\r\n    ],\r\n    declarations: [NgxSelectComponent,\r\n        NgxSelectOptionDirective, NgxSelectOptionSelectedDirective, NgxSelectOptionNotFoundDirective\r\n    ],\r\n    exports: [NgxSelectComponent,\r\n        NgxSelectOptionDirective, NgxSelectOptionSelectedDirective, NgxSelectOptionNotFoundDirective\r\n    ]\r\n})\r\nexport class NgxSelectModule {\r\n    static forRoot(options: INgxSelectOptions): ModuleWithProviders {\r\n        return {\r\n            ngModule: NgxSelectModule,\r\n            providers: [{provide: NGX_SELECT_OPTIONS, useValue: options}]\r\n        };\r\n    }\r\n}\r\n"
  ],
  "names": [
    "escapeString",
    "escapeStringNs",
    "NgxSelectOption",
    "value",
    "text",
    "disabled",
    "data",
    "_parent",
    "this",
    "type",
    "cacheRenderedText",
    "Object",
    "defineProperty",
    "prototype",
    "get",
    "renderText",
    "sanitizer",
    "highlightText",
    "cacheHighlightText",
    "bypassSecurityTrustHtml",
    "replace",
    "RegExp",
    "NgxSelectOptGroup",
    "label",
    "options",
    "filter",
    "callbackFn",
    "optionsFiltered",
    "option",
    "NgxSelectOptionDirective",
    "template",
    "Directive",
    "args",
    "selector",
    "TemplateRef",
    "NgxSelectOptionSelectedDirective",
    "NgxSelectOptionNotFoundDirective",
    "_",
    "lodashNs",
    "NGX_SELECT_OPTIONS",
    "InjectionToken",
    "propertyExists",
    "obj",
    "propertyName",
    "NgxSelectComponent",
    "iterableDiffers",
    "cd",
    "defaultOptions",
    "cacheExternalValue",
    "_this",
    "optionValueField",
    "optionTextField",
    "optGroupLabelField",
    "optGroupOptionsField",
    "multiple",
    "allowClear",
    "placeholder",
    "noAutoComplete",
    "defaultValue",
    "autoSelectSingleOption",
    "autoClearSearch",
    "noResultsFound",
    "size",
    "keyCodeToRemoveSelected",
    "keyCodeToOptionsOpen",
    "keyCodeToOptionsClose",
    "keyCodeToOptionsSelect",
    "keyCodeToNavigateFirst",
    "keyCodeToNavigatePrevious",
    "keyCodeToNavigateNext",
    "keyCodeToNavigateLast",
    "typed",
    "EventEmitter",
    "focus",
    "blur",
    "open",
    "close",
    "select",
    "remove",
    "navigated",
    "selectionChanges",
    "optionsOpened",
    "actualValue",
    "subjOptions",
    "BehaviorSubject",
    "subjSearchText",
    "subjOptionsSelected",
    "subjExternalValue",
    "subjDefaultValue",
    "subjRegisterOnChange",
    "Subject",
    "_focusToInput",
    "isFocused",
    "onChange",
    "v",
    "onTouched",
    "assign",
    "itemsDiffer",
    "find",
    "create",
    "defaultValueDiffer",
    "subscribe",
    "next",
    "emit",
    "subjActualValue",
    "map",
    "concat",
    "merge",
    "o",
    "combineLatest",
    "eVal",
    "dVal",
    "newVal",
    "isEqual",
    "length",
    "distinctUntilChanged",
    "x",
    "y",
    "share",
    "flatMap",
    "Observable",
    "from",
    "of",
    "empty",
    "toArray",
    "optionsFlat",
    "indexOf",
    "selectedOptions",
    "search",
    "filterOptions",
    "cacheOptionsFilteredFlat",
    "navigateOption",
    "ENavigation",
    "firstIfOptionActiveInvisible",
    "optionsFilteredFlat",
    "flatOptions",
    "inputElRef",
    "nativeElement",
    "setFormControlSize",
    "otherClassNames",
    "useFormControl",
    "formControlExtraClasses",
    "form-control-sm input-sm",
    "form-control-lg input-lg",
    "setBtnSize",
    "btn-sm",
    "btn-lg",
    "mainClicked",
    "event",
    "clickedSelectComponent",
    "documentClick",
    "optionsClose",
    "detectChanges",
    "do",
    "navigation",
    "newActiveIdx",
    "index",
    "activeOption",
    "filteredOptionList",
    "first",
    "previous",
    "optionActive",
    "last",
    "firstSelected",
    "idxOfOptionActive",
    "newNavigated",
    "optionActivate",
    "ngDoCheck",
    "diff",
    "items",
    "buildOptions",
    "defVal",
    "ngAfterContentChecked",
    "checkInputVisibility",
    "document",
    "activeElement",
    "canClearNotMultiple",
    "focusToInput",
    "inputKeyDown",
    "keysForOpenedState",
    "keysForClosedState",
    "code",
    "preventDefault",
    "stopPropagation",
    "optionSelect",
    "optionsOpen",
    "optionRemove",
    "mainKeyUp",
    "trackByOption",
    "inputKeyUp",
    "doInputText",
    "inputClick",
    "sanitize",
    "html",
    "highlightOption",
    "isOptionActive",
    "element",
    "ensureVisibleElement",
    "regExp",
    "filterOption",
    "searchCallback",
    "test",
    "subOp",
    "subOption",
    "choiceMenuElRef",
    "cacheElementOffsetTop",
    "offsetTop",
    "container",
    "scrollTop",
    "offsetHeight",
    "clientHeight",
    "option_1",
    "result",
    "Array",
    "isArray",
    "forEach",
    "item",
    "optGroup_1",
    "buildOption",
    "push",
    "parent",
    "writeValue",
    "registerOnChange",
    "fn",
    "registerOnTouched",
    "setDisabledState",
    "isDisabled",
    "Component",
    "styles",
    "providers",
    "provide",
    "NG_VALUE_ACCESSOR",
    "useExisting",
    "forwardRef",
    "multi",
    "IterableDiffers",
    "DomSanitizer",
    "ChangeDetectorRef",
    "undefined",
    "decorators",
    "Inject",
    "Optional",
    "Input",
    "Output",
    "mainElRef",
    "ViewChild",
    "templateOption",
    "ContentChild",
    "read",
    "templateSelectedOption",
    "templateOptionNotFound",
    "HostListener",
    "NgxSelectModule",
    "forRoot",
    "ngModule",
    "useValue",
    "NgModule",
    "imports",
    "CommonModule",
    "declarations",
    "exports"
  ],
  "mappings": "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"
}
